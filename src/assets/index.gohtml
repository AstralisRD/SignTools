<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>iOS Signer Service</title>
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/masonry-layout@4.2.2/dist/masonry.pkgd.min.js"
      integrity="sha384-GNFwBvfVxBkLMJpYMOABq3c+d3KnQxudP/mGPkzpZSTYykLBNsZEnG2D9G/X/+7D"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"
      integrity="sha256-PDJQdTN7dolQWDASIoBVrjkuOEaI137FI15sqI3Oxu8="
      crossorigin="anonymous"
    />
    <style>
      a,
      a:hover {
        color: inherit;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand navbar-dark bg-dark py-3">
      <div class="container px-4">
        <ol class="breadcrumb bg-transparent py-2 my-0 me-auto text-white">
          <li class="breadcrumb-item"><a href="/">iOS Signer</a></li>
        </ol>
        <a id="btnUploadApp" class="btn btn-outline-light my-0 ms-auto" href="#"> Upload App </a>
      </div>
    </nav>
    <div class="modal fade" id="uploadModal" tabindex="-1">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <form id="uploadForm" action="/apps" method="post" enctype="multipart/form-data">
            <div class="modal-header">
              <h5 class="modal-title">Upload App</h5>
              <button id="btnModalClose" type="button" class="btn-close"></button>
            </div>
            <div class="modal-body">
              <div class="mb-2">
                <label class="form-label">App file</label>
                <input class="form-control" type="file" id="formFileSelect" name="{{.FormFile}}" required />
                <input class="form-control" type="text" id="formFileText" hidden disabled />
                <input
                  class="form-control"
                  type="text"
                  id="formFileId"
                  name="{{.FormFileId}}"
                  hidden
                  required
                  readonly
                />
              </div>
              <div class="mb-2">
                <div class="col-md-8">
                  <label for="formProfile" class="form-label">Signing profile</label>
                  <select class="form-select" id="formProfile" name="{{.FormProfileId}}" required>
                    <option selected disabled value="">Choose...</option>
                    {{range $_, $profile := .Profiles}}
                    <option value="{{$profile.Id}}" account="{{$profile.IsAccount}}">{{$profile.Name}}</option>
                    {{end}}
                  </select>
                </div>
              </div>
              <div class="mb-2">
                <div class="col-md-8">
                  <label for="formBuilder" class="form-label">Builder</label>
                  <select class="form-select" id="formBuilder" name="{{.FormBuilderId}}" required>
                    {{range $_, $builder := .Builders}}
                    <option value="{{$builder.Id}}">{{$builder.Name}}</option>
                    {{end}}
                  </select>
                </div>
              </div>
              <div class="mb-2">
                <div class="col-md-9">
                  <label class="form-label">Bundle identifier</label>
                  <div class="form-check">
                    <input
                      class="form-check-input"
                      type="radio"
                      id="formIdOriginal"
                      name="{{.FormId}}"
                      value="{{.FormIdOriginal}}"
                      checked
                    />
                    <label style="display: inline" class="form-check-label" for="formIdOriginal">
                      Use the app's original bundle ID
                    </label>
                    <a
                      style="color: blue"
                      href="#"
                      data-bs-toggle="tooltip"
                      data-bs-placement="right"
                      title="For developer accounts, the original ID will be encoded into
                                   a different but constant ID."
                      >?</a
                    >
                  </div>
                  <div class="form-check">
                    <input
                      class="form-check-input"
                      type="radio"
                      id="formIdProv"
                      name="{{.FormId}}"
                      value="{{.FormIdProv}}"
                    />
                    <label style="display: inline" class="form-check-label" for="formIdProv">
                      Use provisioning profile's application ID
                    </label>
                    <a
                      style="color: blue"
                      href="#"
                      data-bs-toggle="tooltip"
                      data-bs-placement="right"
                      title="Fixes entitlements on explicit provisioning profiles.
                                    For each profile, only one app signed this way can be installed at a time."
                      >?</a
                    >
                  </div>
                  <div class="form-check">
                    <input
                      class="form-check-input"
                      type="radio"
                      id="formIdCustom"
                      name="{{.FormId}}"
                      value="{{.FormIdCustom}}"
                    />
                    <label style="display: inline" class="form-check-label" for="formIdCustom"> Use custom: </label>
                    <a
                      style="color: blue"
                      href="#"
                      data-bs-toggle="tooltip"
                      data-bs-placement="right"
                      title="For developer accounts, the custom ID will be encoded into
                                   a different but constant ID."
                      >?</a
                    >
                    <input
                      type="text"
                      class="form-control"
                      name="{{.FormIdCustomText}}"
                      disabled
                      id="formIdCustomText"
                      placeholder="com.custom.app"
                      required
                    />
                  </div>
                </div>
              </div>
              <div class="mb-0">
                <label class="form-label">Signing options</label>
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="formAppDebug" name="{{.FormAppDebug}}" />
                  <label style="display: inline" class="form-check-label" for="formAppDebug">
                    Enable app debugging
                  </label>
                  <a
                    style="color: blue"
                    href="#"
                    data-bs-toggle="tooltip"
                    data-bs-placement="right"
                    title="Enables the get-task-allow entitlement.
                               Required by some emulators and jailbreaks.
                               Your provisioning profile must support this entitlement."
                    >?</a
                  >
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="formAllDevices" name="{{.FormAllDevices}}" />
                  <label style="display: inline" class="form-check-label" for="formAllDevices">
                    Force enable support for all devices
                  </label>
                  <a
                    style="color: blue"
                    href="#"
                    data-bs-toggle="tooltip"
                    data-bs-placement="right"
                    title="Removes any iOS version or device model restrictions from the app."
                    >?</a
                  >
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="formFileShare" name="{{.FormFileShare}}" />
                  <label style="display: inline" class="form-check-label" for="formFileShare">
                    Force enable file sharing through iTunes
                  </label>
                  <a
                    style="color: blue"
                    href="#"
                    data-bs-toggle="tooltip"
                    data-bs-placement="right"
                    title="Allows you to access the app's data via iTunes and other file managers."
                    >?</a
                  >
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <div
                id="formFileSpinner"
                class="spinner-border text-primary me-3"
                role="status"
                style="display: none"
              ></div>
              <button id="formSubmit" type="button" class="btn btn-primary">Submit</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    <div class="container py-4 py-xxl-5 py-xl-5 px-4">
      <div class="row col-md-8 col-l-7 col-xl-6 px-0 mx-auto pb-3">
        <div class="input-group px-0">
          <input type="text" id="inputSearchFilter" class="form-control" placeholder="Search app name" autofocus />
          <button class="btn btn-outline-secondary" id="btnSearchClear">Clear</button>
        </div>
      </div>
      <div class="row" id="masonryRow">
        {{range $_, $app := .Apps}}
        <div class="col-sm-6 col-lg-4 col-xl-3 p-2 appItem">
          <div
            class="card text-white
                    {{if eq $app.Status 0 }} bg-primary
                    {{else if eq $app.Status 1 }} bg-success
                    {{else if eq $app.Status 2 }} bg-danger
                    {{else if eq $app.Status 3 }} bg-secondary
                    {{end}}"
          >
            <div class="card-body">
              <div class="row">
                <div class="col pe-0">
                  <h5 class="card-title" style="word-break: break-all">{{$app.Name}}</h5>
                </div>
                <div class="col-auto">
                  <div class="dropdown">
                    <a class="bi bi-three-dots-vertical py-1 px-2" href="#" data-bs-toggle="dropdown"></a>
                    <div class="dropdown-menu">
                      <a
                        class="dropdown-item dropdownResign"
                        href="#"
                        x-app-name="{{$app.Name}}"
                        x-app-id="{{$app.Id}}"
                        >Re-sign</a
                      >
                      <a class="dropdown-item" href="{{$app.RenameUrl}}">Rename</a>
                      <a class="dropdown-item" href="{{$app.RestartUrl}}">Restart</a>
                      <a class="dropdown-item" href="{{$app.DeleteUrl}}">Delete</a>
                    </div>
                  </div>
                </div>
              </div>
              <p class="card-text mb-2">
                {{if eq $app.Status 1 }} {{$app.BundleId}} <br />
                {{end}} {{$app.ProfileName}} <br />
                {{if eq $app.Status 0 }} Processing {{else if eq $app.Status 1 }} Signed {{else if eq $app.Status 2 }}
                Failed {{else if eq $app.Status 3 }} Waiting {{end}}
                <br />
                {{$app.ModTime}}
              </p>
              <div class="d-flex flex-wrap justify-content-end">
                {{if eq $app.Status 1 }}
                <a
                  class="btn btn-outline-light mt-2 ms-2"
                  href="itms-services://?action=download-manifest&url={{$app.ManifestUrl}}"
                  >Install</a
                >
                <a class="btn btn-outline-light mt-2 ms-2" href="{{$app.DownloadUrl}}">Download</a>
                {{else}} {{if eq $app.Status 0 }}
                <a class="btn btn-outline-light mt-2 ms-2" href="{{$app.TwoFactorUrl}}">Submit 2FA</a>
                {{end}}
                <div class="d-flex">
                  <a
                    class="btn btn-outline-light mt-2 ms-2 {{if lt (len $app.WorkflowUrl) 1}}disabled{{end}}"
                    href="{{$app.WorkflowUrl}}"
                    >Status</a
                  >
                </div>
                {{end}}
              </div>
            </div>
          </div>
        </div>
        {{end}}
      </div>
    </div>
  </body>

  <script>
    const btnUploadApp = document.getElementById("btnUploadApp");
    const formFileSelect = document.getElementById("formFileSelect");
    const formFileId = document.getElementById("formFileId");
    const formFileText = document.getElementById("formFileText");
    const formSubmit = document.getElementById("formSubmit");
    const uploadForm = document.getElementById("uploadForm");
    const formFileSpinner = document.getElementById("formFileSpinner");
    const modalElem = document.getElementById("uploadModal");
    const modal = new bootstrap.Modal(modalElem, {
      backdrop: "static",
      keyboard: false,
    });
    const btnModalClose = document.getElementById("btnModalClose");
    const formProfile = document.getElementById("formProfile");
    const formIdOriginal = document.getElementById("formIdOriginal");
    const formIdProv = document.getElementById("formIdProv");
    const formIdCustom = document.getElementById("formIdCustom");
    const formIdCustomText = document.getElementById("formIdCustomText");
    const dropdownResign = document.getElementsByClassName("dropdownResign");
    const inputSearchFilter = document.getElementById("inputSearchFilter");
    const btnSearchClear = document.getElementById("btnSearchClear");
    const masonryRow = document.getElementById("masonryRow");
    const masonry = new Masonry(masonryRow, { percentPosition: true, horizontalOrder: true });
    let canRefresh = true;

    for (let item of dropdownResign) {
      item.addEventListener("click", function () {
        canRefresh = false;
        formFileId.value = item.getAttribute("x-app-id");
        formFileText.hidden = false;
        formFileText.required = true;
        formFileText.value = item.getAttribute("x-app-name");
        formFileSelect.hidden = true;
        formFileSelect.required = false;
        modal.show();
      });
    }
    btnUploadApp.addEventListener("click", function () {
      canRefresh = false;
      formFileId.value = "";
      formFileText.hidden = true;
      formFileText.required = false;
      formFileText.value = "";
      formFileSelect.hidden = false;
      formFileSelect.required = true;
      modal.show();
    });
    btnModalClose.addEventListener("click", function () {
      modal.hide();
      canRefresh = true;
    });
    formSubmit.addEventListener("click", function () {
      if (!uploadForm.checkValidity()) {
        uploadForm.reportValidity();
        return;
      }
      formSubmit.disabled = true;
      btnModalClose.disabled = true;
      formFileSpinner.style.display = "inline-block";

      // https://github.com/hakimel/Ladda/issues/71
      setTimeout(function () {
        uploadForm.submit();
      }, 200);
    });
    formProfile.addEventListener("change", function () {
      const selectedOption = formProfile.options[formProfile.selectedIndex];
      if (selectedOption.getAttribute("account") === "true") {
        if (formIdProv.checked) {
          formIdOriginal.checked = true;
        }
        formIdProv.disabled = true;
      } else {
        formIdProv.disabled = false;
      }
    });
    document.querySelectorAll('input[name="{{.FormId}}"]').forEach(function (a) {
      a.addEventListener("change", function () {
        if (formIdCustom.checked) {
          formIdCustomText.disabled = false;
        } else {
          formIdCustomText.disabled = true;
        }
      });
    });

    inputSearchFilter.addEventListener("input", function () {
      window.location.hash = inputSearchFilter.value;
      if (inputSearchFilter.value === "") {
        for (let app of document.getElementsByClassName("appItem")) {
          app.hidden = false;
        }
        masonry.layout();
        return;
      }
      let searchText = inputSearchFilter.value.toLowerCase();
      for (let app of document.getElementsByClassName("appItem")) {
        if (app.querySelector(".card-title").textContent.toLowerCase().includes(searchText)) {
          app.hidden = false;
        } else {
          app.hidden = true;
        }
      }
      masonry.layout();
    });
    if (window.location.hash) {
      inputSearchFilter.value = decodeURIComponent(window.location.hash.substring(1));
      inputSearchFilter.dispatchEvent(new Event("input"));
    }
    const searchClearHandler = function () {
      inputSearchFilter.value = "";
      inputSearchFilter.dispatchEvent(new Event("input"));
    };
    inputSearchFilter.addEventListener("keydown", function (e) {
      if (e.key === "Escape") {
        searchClearHandler();
      }
    });
    btnSearchClear.addEventListener("click", searchClearHandler);

    // enable all tooltips
    let tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    function debounce(func, wait, immediate) {
      let timeout;
      return function executedFunction() {
        const context = this;
        const args = arguments;
        const later = function () {
          timeout = null;
          if (!immediate && canRefresh && !document.hidden) {
            func.apply(context, args);
          }
        };
        const callNow = immediate && !timeout && canRefresh && !document.hidden;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
          func.apply(context, args);
        }
      };
    }

    document.addEventListener("DOMContentLoaded", function () {
      const scrollpos = localStorage.getItem("scrollpos");
      if (scrollpos) {
        window.scrollTo(0, scrollpos);
        localStorage.removeItem("scrollpos");
      }
    });

    setTimeout(function () {
      const refresh = function () {
        localStorage.setItem("scrollpos", window.scrollY);
        window.location.reload();
      };
      const refreshDebounce = debounce(refresh, 3_000);
      document.addEventListener("click", refreshDebounce);
      document.addEventListener("keydown", refreshDebounce);
      document.addEventListener("visibilitychange", function () {
        if (!document.hidden) {
          refresh();
        }
      });
      refreshDebounce();
    }, 7_000);
  </script>
</html>
